(Problem C ) Error Sequence
Max. Marks: 100
Consider a strictly-increasing sequence of integers . Alice picked a continuous sequence  from it.

Bob then removed exactly  numbers from this sequence, while maintaining the relative order of the remaining elements, thus obtaining a sequence . He then subtracted  from all the elements to form the final sequence .

For example, let . This yields the sequence of primes . Assume that Bob has removed the numbers 17 and 23 to obtain . After that, he subtracted 11 from every element to get .

Alternatively, he could have removed 11 and 29 to obtain the sequence  and . Note that the same sequence may also be generated by, for instance, picking  and removing 29 and 31.

Eve found the number  and the sequences , . She now wonders, what is the smallest possible , that could yield the sequence  through the process described above?

Input format:

First line:  (number of test cases)
For each test case
First line: Three space-separated integers ,  , and  satisfying 
Second line:  space-separated integers  satisfying  and 
Third line:  space-separated integers . It is guaranteed that  .
It is guaranteed that there always exists a solution.

Output:

For each test case, output a single integer  - the smallest element in the sequence that Alice chose.

Scoring:

In all test sets, .

In the first test set, worth 12 points,  and .

In the second test set, worth 21 points,  and .

In the third test set, worth 24 points,  and .

In the fourth test set, worth 25 points, ,  and .

In the fifth test set, worth 18 points,, ,  and .

SAMPLE INPUT 
1
11 6 4
2 3 5 7 11 13 17 19 23 29 31
0 6 8 18
SAMPLE OUTPUT 
11
Explanation
This is the example from the statement.

Time Limit:	5.0 sec(s) for each input file.
Memory Limit:	256 MB
Source Limit:	1024 KB
Marking Scheme:	Marks are awarded if any testcase passes.
Allowed Languages:	Bash, C, C++, C++14, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java, Java 8, JavaScript(Rhino), JavaScript(Node.js), Julia, Kotlin, Lisp, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Racket, Ruby, Rust, Scala, Swift, Swift-4.1, Visual Basic